{
  "hash": "07c7eb8335730cca15869a97f3745144",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Disease modeling\"\neditor: visual\neditor_options: \n  chunk_output_type: inline\nbibliography: references.bib\n---\n\n\n\n\n\n## Introduction\n\nAs seen in the previous chapter, plant disease modeling is a crucial tool for predicting disease dynamics and informing management decisions when integrated into decision support systems. By leveraging models, researchers and practitioners can anticipate disease outbreaks, assess potential risks, and implement timely interventions to mitigate losses [@savary2018; @rossi2010a].\n\nMathematical modeling involves representing empirical phenomena and experimental outcomes using mathematical functions. The data used for these models may be collected specifically for modeling purposes or drawn from existing experiments and observations originally conducted to address different research questions, with such data often found in the literature [@hau1990].\n\nMathematical models integrating plant, disease, and environmental - in most cases weather-based variables - factors have been developed since the mid-1900s (See recent review by @gonzález-domínguez2023 ). Dynamic modeling of disease epidemics gained traction in the early 1960s with foundational work by Vanderplank and Zadoks, setting the stage for future advancements. Since then, researchers have contributed extensively to model development, mainly focusing on the plant disease cycle which outline pathogen development stages, such as dormancy, reproduction, dispersal, and pathogenesis, driven by interactions among host, pathogen, and environmental factors [@dewolf2007].\n\nA systematic map by @fedele2022a identified over 750 papers on plant disease models, primarily aimed at understanding system interactions (n = 680). This map revealed that while most models focus on system understanding, fewer are devoted to tactical management (n = 40), strategic planning (n = 38), or scenario analysis (n = 9).\n\nIn terms of model development, we can classify the models into two main groups based on the approach taken [@gonzález-domínguez2023]: Empirical or mechanistic approaches, which differ fundamentally in their basis, complexity and application ([@fig-approaches_modeling]).\n\n![Steps of model development from data collection to modeling based on statistical relationships (data-driven) between data collected from field or controlled environment to mechanistic approach based on the elements of the disease cycles (concept-driven).](imgs/modeling-fig1.png){#fig-approaches_modeling fig-align=\"center\" width=\"614\"}\n\n**Empirical models**, which emerged in the mid-20th century, rely on data-driven statistical relationships between variables collected under varying field or controlled environments. These models often lack cause-effect understanding, making them less robust and requiring rigorous validation and calibration when applied in diverse environments, especially in regions that did not provide data for model construction. The parameters of the model change every time new data are incorporated during model development.\n\nIn contrast, **mechanistic models**, developed from a deep understanding of biological and epidemiological processes, explain disease dynamics based on known system behaviors in response to external variables---a concept-driven approach. These dynamic models quantitatively characterize the state of the pathosystem over time, offering generally more robust predictions by utilizing mathematical equations to describe how epidemics evolve under varying environmental conditions.\n\nBoth empirical and mechanistic approaches are valid methodologies extensively used in plant pathology research. The choice between these approaches depends on several factors, including data availability, urgency in model development, and, frequently, the researcher's experience or preference. Empirical models focus on statistical relationships derived directly from data, whereas mechanistic models aim to represent the biological processes of disease progression through linked mathematical equations.\n\nIn mechanistic modeling, the equations used to predict specific disease components---such as infection frequency or the latency period---are often empirically derived from controlled experiments. For example, an infection frequency equation is typically based on data collected under specific environmental conditions, with models fitted to accurately describe observed patterns. These process-based models are then built by integrating empirically-derived equations or rules, which collectively simulate the disease cycle. Data and equations are sourced from published studies or generated from new experiments conducted by researchers.\n\nBeyond their practical predictive value, mechanistic models are valuable tools for organizing existing knowledge about a particular disease, helping to identify gaps and guide future research efforts. An example of such work is the extensive collection of comprehensive mechanistic models developed for various plant diseases by the research group led by Prof. Vittorio Rossi in Italy [@rossi2008; @rossi2014; @salotti2023; @salotti2022].\n\nThis chapter focuses mainly on empirical modeling. We begin by examining the types of data utilized in model development, focusing on those collected under controlled conditions, such as replicated laboratory or growth chamber experiments, as well as field data collected from several locations and years. We will also analyze real-world case studies, drawing on examples from the literature to replicate and understand model applications. Through these examples, we aim to illustrate the process of fitting models to data and underscore the role of modeling in advancing plant disease management practices.\n\n## Controlled environment\n\nIn this section, we will demonstrate, using examples from the literature, how statistical models can be fitted to data that represent various stages of the disease cycle.\n\nResearch on disease-environment interactions under controlled conditions - such as laboratory or growth chamber studies - lays the groundwork for building foundational models, including infection-based models and sub-models for specific processes like dormancy, dispersal, infection, and latency [@krause1975; @magarey2005; @dewolf2007].\n\nGrowth chambers and phytotrons are essential for testing the effects of individual variables, though these controlled results may not fully replicate field conditions. Anyway, laboratory experiments help clarify specific questions by isolating interactions, unlike complex field trials where host, pathogen, and environment factors interact. Polycyclic or \"mini epidemic\" experiments enable observation of disease dynamics under targeted conditions [@hau1990; @rotem1988].\n\nOnce developed, these sub-models can be incorporated into larger mechanistic models that simulate the entire disease cycle, thereby mimicking disease progression over time [@rossi2008; @salotti2023]. Alternatively, sub-models can also be used in stand-alone predictive systems where the process being modeled - such as infection - is the key factor in determining disease occurrence [@machardy1989; @magarey2007]. For example, infection sub-models can be integrated into prediction systems that help schedule crop protection measures by forecasting when infection risk is highest.\n\n### Infection-based models\n\nTo model infection potential based on environmental factors, simple rules can be used with daily weather data, such as temperature and rainfall thresholds [@magarey2002]. Simple decision aids, such as charts and graphs, also exist to help model infection potential by using combinations of daily average temperature and hours of wetness. These tools offer a straightforward approach to evaluate infection risks based on readily available weather data, supporting decision-making without complex modeling [@seem1984]. However, for many pathogens, hourly data is needed, requiring complex models that track favorable conditions hour by hour. These models start with specific triggers and can reset due to conditions like dryness or low humidity, simulating a biological clock for infection risk assessment [@magarey2007].\n\nModeling approaches vary based on available data and model goals. A common method is the matrix approach, like the Wallin potato late blight model, which uses rows for temperature and columns for moisture duration to estimate disease severity [@krause1975] (see previous chapter on [warning systems](https://r4pde.net/prediction-warning-systems)). Bailey enhanced this with an interactive matrix that combines temperature, relative humidity, and duration to assess infection risk across pathogens, making it versatile for various modeling needs [@bailey1999].\n\nWhen infection responses are measured at various temperature and wetness combinations, regression models can be developed to predict infection rates. These models often use polynomial, logistic, or complex three-dimensional response surface equations to represent the relationship between environmental conditions and infection potential. In an excellent review title \"*How to create and deploy infection models for plant pathogen*s\" @magarey2007 discusses that many modeling approaches lack biological foundations and are not generic, making them unsuitable for developing a unified set of disease forecast models. While three-dimensional response surfaces, such as those created with sufficient temperature-moisture observations, offer detailed infection responses, they are often too complex and data-intensive for widespread use (seeTable 1 adapted from @magarey2007).\n\n| Approach                                                               | Strengths                                                                                                          | Weaknesses                                                                               |\n|------------------|---------------------------------|---------------------|\n| Matrix [@krause1975; @mills1944; @windels1998]                         | Easy; converts moisture/temperature combinations into severity values or risk categories. Tried and true approach. | Data to populate matrix may not be readily available.                                    |\n| Regression:<br>-- Polynomial [@evans1992]<br>-- Logistic [@bulger1987] | Widely used in plant pathology. Available for many economically important pathogens.                               | Parameters not biologically based. Requires dataset for development.                     |\n| Three-dimensional response surface [@duthie1997]                       | Describes infection response in detail.                                                                            | Parameters not biologically based. Complex, requires extensive data and processing time. |\n| Degree wet hours [@pfender2003]                                        | Simple; based on degree hours, commonly used in entomology. Requires only Tmin and Tmax                            | Recently developed; assumes linear thermal response.                                     |\n| Temperature-moisture response function [@magarey2005]                  | Simple; based on crop modeling functions, requires only Tmin, Topt and Tmax                                        | Recently developed.                                                                      |\n\n: Comparison of different infection modeling approaches. Source: @magarey2007\n\nIn the following sections, I will demonstrate how various biologically meaningful models fit infection data, using temperature, wetness duration, or a combination of both as predictors.\n\n#### Temperature effects\n\n##### Generalized beta-function\n\nAmong several non-linear models that can be fitted to infection responses to temperature, the generalized beta-function is an interesting alternative [@hau1990]. This is a nonlinear model with five parameters. Two of them, namely $b$ and $c$ , have a biological meaning because they are estimates of the minimum and maximum temperature of the biological process under consideration.\n\nWe will use a subset of the data obtained from a study conducted under controlled conditions that aimed to assess the influence of temperature on the symptom development of citrus canker in sweet orange [@dallapria2006]. The data used here is only for severity on the cultivar Hamlin (plot a in @fig-temperature). The data was extracted using the R package {digitize} as shown [here on this tweet](https://twitter.com/edelponte/status/1580320409794539520?s=20&t=KqjJPmwzFVKm8Gu7Ss-P6A).\n\n![Effect of temperature (12, 15, 20, 25, 30, 35 or 40°C) on disease severity of citrus canker on sweet orange cvs Hamlin (a), Natal (b), Pera (c) and Valencia (d) with a leaf wetness duration of 24 h. Each point represents the mean of three repetitions. Vertical bars represent standard errors. Lines show the generalized beta function fitted to data. Source: @dallapria2006](imgs/modeling-fig_temperature.gif){#fig-temperature fig-align=\"center\" width=\"441\"}\n\nLet's enter the data manually. Where $t$ is the temperature and $y$ is the severity on leaves.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp <- tibble::tribble(\n  ~t, ~y,\n12.0, 0.00,\n15.0, 0.1,\n20.0, 0.5,\n25.0, 1.2,\n30.0, 1.5,\n35.0, 1.2,\n40.0, 0.1\n)\n```\n:::\n\n\n\n\n\nFit the generalized beta-function [@hau1990]. The model can be written as:\n\n$$\ny = a*((t - b )^d)*((c - t)^e)\n$$\n\nwhere $b$ and $c$ represent minimum and maximum temperatures, respectively, for the development of the disease, $a$, $d$ and $e$ are parameters to be estimated, $t$ is the temperature and $y$ is disease severity. We need the {minpack.lm} library to avoid parameterization issues.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(minpack.lm)\nfit_temp <- nlsLM(\n  y ~ a * ((t - b) ^ d) * ((c - t) ^ e),\n  start = list(\n    a = 0,\n    b = 10,\n    c = 40,\n    d = 1.5,\n    e = 1\n  ),\n  algorithm = \"port\",\n  data = temp\n)\nsummary(fit_temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: y ~ a * ((t - b)^d) * ((c - t)^e)\n\nParameters:\n   Estimate Std. Error t value Pr(>|t|)    \na  0.001303   0.006295   0.207    0.855    \nb 11.999999   4.875414   2.461    0.133    \nc 40.137236   0.346763 115.748 7.46e-05 ***\nd  1.760101   1.193017   1.475    0.278    \ne  0.830868   0.445213   1.866    0.203    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1121 on 2 degrees of freedom\n\nAlgorithm \"port\", convergence message: Relative error between `par' and the solution is at most `ptol'.\n```\n\n\n:::\n\n```{.r .cell-code}\nmodelr::rsquare(fit_temp, temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9898275\n```\n\n\n:::\n:::\n\n\n\n\n\nStore the model parameters in objects.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_temp$m$getAllPars()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          a           b           c           d           e \n 0.00130259 11.99999931 40.13723602  1.76010097  0.83086798 \n```\n\n\n:::\n\n```{.r .cell-code}\na <- fit_temp$m$getAllPars()[1]\nb <- fit_temp$m$getAllPars()[2]\nc <- fit_temp$m$getAllPars()[3]\nd <- fit_temp$m$getAllPars()[4]\ne <- fit_temp$m$getAllPars()[5]\n```\n:::\n\n\n\n\n\nCreate a data frame for predictions at each temperature unit from 10 to 45 degree Celsius.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- seq(10, 45, 0.1)\ny <- a * ((t - b) ^ d) * ((c - t) ^ e)\ndat <- data.frame(t, y)\n```\n:::\n\n\n\n\n\nPlot the observed and predicted data using {ggplot2} package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(r4pde)\ndat |>\n  ggplot(aes(t, y)) +\n  geom_line() +\n  geom_point(data = temp, aes(t, y)) +\n  theme_r4pde(font_size = 16) +\n  labs(x = \"Temperature\", y = \"Severity\",\n       title = \"Generalized beta-function\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n##### Analytis beta function\n\n@ji2023a tested and compared various mathematical equations to describe the response of mycelial growth to temperature for several fungi associated with Grapevine trunk diseases. The authors found that the beta equation [@analytis1977] provided the best fit and, therefore, was considered the most suitable for all fungi.\n\nThe model equation for re-scaled severity (0 to 1) as a function of temperature is given by:\n\n$Y = \\left( a \\cdot T_{eq}^b \\cdot (1 - T_{eq}) \\right)^c \\quad ; \\quad \\text{if } Y > 1, \\text{ then } Y = 1$\n\nwhere\n\n$T_{eq} = \\frac{T - T_{\\text{min}}}{T_{\\text{max}} - T_{\\text{min}}}$\n\n$T$ is the temperature in degrees Celsius. $T_{\\text{min}}$ is the minimum temperature, $T_{\\text{max}}$ is the maximum temperature for severity. The $a$ , $b$ , and $c$ are parameters that define the top, symmetry, and size of the unimodal curve.\n\nLet's rescale (0 to 1) the data on the citrus canker using the function rescale of the {scales} package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\ntemp$yscaled <- rescale(temp$y)\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n      t     y yscaled\n  <dbl> <dbl>   <dbl>\n1    12   0    0     \n2    15   0.1  0.0667\n3    20   0.5  0.333 \n4    25   1.2  0.8   \n5    30   1.5  1     \n6    35   1.2  0.8   \n7    40   0.1  0.0667\n```\n\n\n:::\n:::\n\n\n\n\n\nNow we can fit the model using the same `nlsLM` function.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the minimum and maximum temperatures\nTmin <- 12\nTmax <- 40\n\nlibrary(minpack.lm)\nfit_temp2 <- nlsLM(\n  yscaled ~ (a * ((t - Tmin) / (Tmax - Tmin))^b * (1 - ((t - Tmin) / (Tmax - Tmin))))^c,\n  data = temp,\n  start = list(a = 1, b = 2, c = 3), # Initial guesses for parameters\n  algorithm = \"port\" \n)\n\nsummary(fit_temp2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: yscaled ~ (a * ((t - Tmin)/(Tmax - Tmin))^b * (1 - ((t - Tmin)/(Tmax - \n    Tmin))))^c\n\nParameters:\n  Estimate Std. Error t value Pr(>|t|)    \na   6.7625     0.3218  21.013 3.03e-05 ***\nb   1.9648     0.1030  19.072 4.45e-05 ***\nc   1.1607     0.1507   7.701  0.00153 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.03955 on 4 degrees of freedom\n\nAlgorithm \"port\", convergence message: Relative error in the sum of squares is at most `ftol'.\n```\n\n\n:::\n\n```{.r .cell-code}\nmodelr::rsquare(fit_temp2, temp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9948325\n```\n\n\n:::\n:::\n\n\n\n\n\nLets's store the model parameters in objects.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_temp2$m$getAllPars()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       a        b        c \n6.762509 1.964817 1.160702 \n```\n\n\n:::\n\n```{.r .cell-code}\na <- fit_temp2$m$getAllPars()[1]\nb <- fit_temp2$m$getAllPars()[2]\nc <- fit_temp2$m$getAllPars()[3]\n```\n:::\n\n\n\n\n\nAgain, we create a data frame for predictions at each temperature unit from 10 to 45 degree Celsius.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTmin <- 12\nTmax <- 40\nt <- seq(10, 45, 0.1)\ny <- (a * ((t - Tmin) / (Tmax - Tmin))^b * (1 - ((t - Tmin) / (Tmax - Tmin))))^c\ndat2 <- data.frame(t, y)\n```\n:::\n\n\n\n\n\nAnd now we can plot the observed and predicted data using {ggplot2} package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(r4pde)\ndat2 |>\n  ggplot(aes(t, y)) +\n  geom_line() +\n  geom_point(data = temp, aes(t, yscaled)) +\n  theme_r4pde(font_size = 16) +\n  labs(x = \"Temperature\", y = \"Scaled severity\", \n       title = \"Analytis beta function\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### Moisture effects\n\n##### Monomolecular model\n\nFor this example, we will use a subset of the data obtained from a study conducted under controlled conditions that aimed to assess the effects of moisture duration on the symptom development of citrus canker in sweet orange [@dallapria2006]. As in the previous example for temperature effects, the data used here is only for severity on the cultivar Hamlin (plot a in @fig-moisture). The data was also extracted using the R package digitize.\n\nLet's look at the original data and the predictions by the model fitted in the paper.\n\n![Effect of leaf wetness duration (0, 4, 8, 12, 16, 20 or 24 h) on disease severity of citrus canker on sweet orange cvs Hamlin (a), Natal (b), Pera (c) and Valencia (d) at 30°C. Each point represents the mean of three repetitions. Vertical bars represent standard errors. Lines show the monomolecular model fitted to data. Source: @dallapria2006](imgs/modeling-fig2.gif){#fig-moisture fig-align=\"center\" width=\"516\"}\n\nFor this pattern in the data, we will fit a three-parameter asymptotic regression model. These models describe a limited growth, where y approaches an horizontal asymptote as x tends to infinity. This equation is also known as Monomolecular Growth, Mitscherlich law or von Bertalanffy law. See [this tutorial](https://www.statforbiology.com/nonlinearregression/usefulequations) for comprehensive information about fitting several non-linear regression models in R.\n\nAgain, we enter the data manually. The 𝑥x is wetness duration in hours and 𝑦y is severity.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwet <- tibble::tribble(~ x, ~ y,\n                       0 ,  0,\n                       4 ,  0.50,\n                       8 ,  0.81,\n                       12,  1.50,\n                       16,  1.26,\n                       20,  2.10,\n                       24,  1.45)\n```\n:::\n\n\n\n\n\nThe model can be written as:\n\n$y = c1 + (d1-c1)*(1-exp(-x/e1))$\n\nwhere $c$ is the lower limit (at $x = 0$), the parameter $d$ is the upper limit and the parameter $e$ (greater than 0) is determining the steepness of the increase as $x$.\n\nWe will solve the model again using the `nlsLM` function. We should provide initial values for the three parameters.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_wet <- nlsLM(y ~ c1 + (d1 - c1) * (1 - exp(-x / e1)),\n                 start = list(c1 = 0.5,\n                              d1 = 3,\n                              e1 = 1),\n                 data = wet)\n\nsummary(fit_wet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: y ~ c1 + (d1 - c1) * (1 - exp(-x/e1))\n\nParameters:\n   Estimate Std. Error t value Pr(>|t|)  \nc1 -0.04898    0.31182  -0.157   0.8828  \nd1  2.00746    0.70594   2.844   0.0467 *\ne1 11.63694    9.33184   1.247   0.2804  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.3296 on 4 degrees of freedom\n\nNumber of iterations to convergence: 7 \nAchieved convergence tolerance: 1.49e-08\n```\n\n\n:::\n\n```{.r .cell-code}\nmodelr::rsquare(fit_wet, wet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8532282\n```\n\n\n:::\n:::\n\n\n\n\n\nStore the value of the parameters in the respective object.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHW <- seq(0, 24, 0.1)\nc1 <-  fit_wet$m$getAllPars()[1]\nd1 <- fit_wet$m$getAllPars()[2]\ne1 <- fit_wet$m$getAllPars()[3]\ny <-  (c1 + (d1 - c1) * (1 - exp(-HW / e1)))\ndat2 <- data.frame(HW, y)\n```\n:::\n\n\n\n\n\nNow we can plot the predictions and the original data.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat2 |>\n  ggplot(aes(HW, y)) +\n  geom_line() +\n  geom_point(data = wet, aes(x, y)) +\n  theme_r4pde(font_size = 16) +\n  labs(x = \"Wetness duration\", y = \"Severity\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n##### Weibull model\n\nIn the study by [@ji2021; @ji2023a], a Weibull model was fitted to the re-scaled data (0 to 1) on the effect of moisture duration on spore germination or infection. Let's keep working with the re-scaled data on the citrus canker.\n\nThe model is given by:\n\n$y = 1 - \\exp(-(a \\cdot x)^b)$\n\nwhere $y$ is the response variable, $x$ is the moist duration, $a$ is the scale parameter influencing the rate of infection and $b$ is the shape parameter affecting the curve's shape and acceleration\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwet$yscaled <- rescale(wet$y) \nwet\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n      x     y yscaled\n  <dbl> <dbl>   <dbl>\n1     0  0      0    \n2     4  0.5    0.238\n3     8  0.81   0.386\n4    12  1.5    0.714\n5    16  1.26   0.6  \n6    20  2.1    1    \n7    24  1.45   0.690\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_wet2 <- nlsLM(\n  yscaled ~ 1 - exp(-(a * x)^b),\n  data = wet,\n  start = list(a = 1, b = 2),  # Initial guesses for parameters a and b\n  )\nsummary(fit_wet2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFormula: yscaled ~ 1 - exp(-(a * x)^b)\n\nParameters:\n  Estimate Std. Error t value Pr(>|t|)   \na  0.07684    0.01296    5.93  0.00195 **\nb  1.07610    0.37103    2.90  0.03378 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1404 on 5 degrees of freedom\n\nNumber of iterations to convergence: 26 \nAchieved convergence tolerance: 1.49e-08\n```\n\n\n:::\n\n```{.r .cell-code}\nmodelr::rsquare(fit_wet2, wet)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8534077\n```\n\n\n:::\n:::\n\n\n\n\n\nSet the value of the parameters in the respective objects\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- seq(0, 24, 0.1)\na <-  fit_wet2$m$getAllPars()[1]\nb <- fit_wet2$m$getAllPars()[2]\ny <-  1 - exp(-(a * x)^b)\ndat3 <- data.frame(x, y)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 |>\n  ggplot(aes(x, y)) +\n  geom_line() +\n  geom_point(data = wet, aes(x, yscaled)) +\n  theme_r4pde(font_size = 16) +\n  labs(x = \"Wetness duration\", y = \"Scaled severity\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n#### Integrating temperature and wetness effects\n\nThe equations developed for the separate effects can be integrated to create a surface response curve or a simple contour plot. Let's first integrate the generalized beta and the monomolecular models for the original severity data for the citrus canker experiment.\n\nFirst, we need a data frame for the interaction between temperature $t$ and hours of wetness $hw$. Then, we obtain the disease value for each combination of $t$ and $hw$.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- rep(1:40, 40)\nhw <- rep(1:40, each = 40)\n\n# let's fit the two models again and store the parameters in objects\n# Temperature effects\nfit_temp <- nlsLM(\n  y ~ a * ((t - b) ^ d) * ((c - t) ^ e),\n  start = list(\n    a = 0,\n    b = 10,\n    c = 40,\n    d = 1.5,\n    e = 1\n  ),\n  algorithm = \"port\",\n  data = temp\n)\nfit_temp$m$getAllPars()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          a           b           c           d           e \n 0.00130259 11.99999936 40.13723602  1.76010097  0.83086798 \n```\n\n\n:::\n\n```{.r .cell-code}\na <- fit_temp$m$getAllPars()[1]\nb <- fit_temp$m$getAllPars()[2]\nc <- fit_temp$m$getAllPars()[3]\nd <- fit_temp$m$getAllPars()[4]\ne <- fit_temp$m$getAllPars()[5]\n\n## Moist duration effects\nfit_wet <- nlsLM(y ~ c1 + (d1 - c1) * (1 - exp(-x / e1)),\n                 start = list(c1 = 0.5,\n                              d1 = 3,\n                              e1 = 1),\n                 data = wet)\n\nc1 <-  fit_wet$m$getAllPars()[1]\nd1 <- fit_wet$m$getAllPars()[2]\ne1 <- fit_wet$m$getAllPars()[3]\n\ndis <-\n  (a * (t - b) ^ d) * ((c - t) ^ e) * (c1 + (d1 - c1) * (1 - exp(- hw / e1)))\nvalidation <- data.frame(t, hw, dis)\n```\n:::\n\n\n\n\n\nNow the contour plot can be visualized using {ggplot2} and {geomtextpath} packages.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(geomtextpath)\nggplot(validation, aes(t, hw, z = dis)) +\n  geom_contour_filled(bins = 8, alpha = 0.7) +\n  geom_textcontour(bins = 8,\n                   size = 2.5,\n                   padding = unit(0.05, \"in\")) +\n  theme_light(base_size = 10) +\n  theme(legend.position = \"right\") +\n  ylim(0, 40) +\n  labs(y = \"Wetness duration (hours)\",\n       fill = \"Severity\",\n       x = \"Temperature (Celcius)\",\n       title = \"Integrating generalized beta and monomolecular\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n\nIn the second example, let's integrate the Analytis beta and the Weibull model:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_temp2 <- nlsLM(\n  yscaled ~ (a * ((t - Tmin) / (Tmax - Tmin))^b * (1 - ((t - Tmin) / (Tmax - Tmin))))^c,\n  data = temp,\n  start = list(a = 1, b = 2, c = 3), # Initial guesses for parameters\n  algorithm = \"port\" \n)\n\nfit_temp2$m$getAllPars()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       a        b        c \n6.762509 1.964817 1.160702 \n```\n\n\n:::\n\n```{.r .cell-code}\na2 <- fit_temp2$m$getAllPars()[1]\nb2 <- fit_temp2$m$getAllPars()[2]\nc2 <- fit_temp2$m$getAllPars()[3]\n\n\nfit_wet2 <- nlsLM(\n  yscaled ~ 1 - exp(-(d * x)^e),\n  data = wet,\n  start = list(d = 1, e = 2),  # Initial guesses for parameters a and b\n  )\n\nd2 <-  fit_wet2$m$getAllPars()[1]\ne2 <- fit_wet2$m$getAllPars()[2]\n\nTmin <- 12\nTmax <- 40\ndis2 <-  (a2 * ((t - Tmin) / (Tmax - Tmin))^b2 * (1 - ((t - Tmin) / (Tmax - Tmin))))^c2 * 1 - exp(-(d2 * hw)^e2)\n\nt <- rep(1:40, 40)\nhw <- rep(1:40, each = 40)\nvalidation2 <- data.frame(t, hw, dis2)\n\nvalidation2 <- validation2 |> \n  filter(dis2 != \"NaN\") |> \n  mutate(dis2 = case_when(dis2 < 0 ~ 0,\n                          TRUE ~ dis2))\n```\n:::\n\n\n\n\n\nNow the plot.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(validation2, aes(t, hw, z = dis2)) +\n  geom_contour_filled(bins = 7, alpha = 0.7) +\n  geom_textcontour(bins = 7,\n                   size = 2.5,\n                   padding = unit(0.05, \"in\")) +\n  theme_light(base_size = 10) +\n  theme(legend.position = \"right\") +\n  ylim(0, 40) +\n  labs(y = \"Wetness duration (hours)\",\n       fill = \"Severity\",\n       x = \"Temperature (Celcius)\",\n       title = \"Integrating generalized beta and monomolecular\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\nWe can create a 3D surface plot to visualize the predictions, as [it was used in the original paper](https://bsppjournals.onlinelibrary.wiley.com/cms/asset/0acf45ce-bad8-4a49-9a17-181836aa9876/ppa_1393_f3.gif). Note that In `plot_ly`, a 3D surface plot requires a matrix or grid format for the `z` values, with corresponding vectors for `x` and `y` values that define the axes. If the data frame (`validation2`) has three columns (`t`, `hw`, and `dis2`), we'll need to convert `dis2` into a matrix format that `plot_ly` can interpret for a surface plot.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\nlibrary(reshape2)  \nz_matrix <- acast(validation2, hw ~ t, value.var = \"dis2\")\nx_vals <- sort(unique(validation2$t))  \ny_vals <- sort(unique(validation2$hw)) \n\nplot_ly(x = ~x_vals, y = ~y_vals, z = ~z_matrix, type = \"surface\") |> \n    config(displayModeBar = FALSE) |> \n  layout(\n    scene = list(\n      xaxis = list(title = \"Temperature (°C)\", nticks = 10),\n      yaxis = list(title = \"Wetness Duration (hours)\", range = c(0, 40)),\n      zaxis = list(title = \"Severity\"),\n      aspectratio = list(x = 1, y = 1, z = 1)  \n    ),\n    title = \"Integrating Generalized Beta and Monomolecular\"\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-b7cb77cee58130c53c00\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b7cb77cee58130c53c00\">{\"x\":{\"visdat\":{\"72815aff1e9b\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"72815aff1e9b\",\"attrs\":{\"72815aff1e9b\":{\"x\":{},\"y\":{},\"z\":{},\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"surface\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"Temperature (°C)\",\"nticks\":10},\"yaxis\":{\"title\":\"Wetness Duration (hours)\",\"range\":[0,40]},\"zaxis\":{\"title\":\"Severity\"},\"aspectratio\":{\"x\":1,\"y\":1,\"z\":1}},\"title\":\"Integrating Generalized Beta and Monomolecular\",\"hovermode\":\"closest\",\"showlegend\":false,\"legend\":{\"yanchor\":\"top\",\"y\":0.5}},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false,\"displayModeBar\":false},\"data\":[{\"colorbar\":{\"title\":\"z_matrix\",\"ticklen\":2,\"len\":0.5,\"lenmode\":\"fraction\",\"y\":1,\"yanchor\":\"top\"},\"colorscale\":[[\"0\",\"rgba(68,1,84,1)\"],[\"0.0416666666666667\",\"rgba(70,19,97,1)\"],[\"0.0833333333333333\",\"rgba(72,32,111,1)\"],[\"0.125\",\"rgba(71,45,122,1)\"],[\"0.166666666666667\",\"rgba(68,58,128,1)\"],[\"0.208333333333333\",\"rgba(64,70,135,1)\"],[\"0.25\",\"rgba(60,82,138,1)\"],[\"0.291666666666667\",\"rgba(56,93,140,1)\"],[\"0.333333333333333\",\"rgba(49,104,142,1)\"],[\"0.375\",\"rgba(46,114,142,1)\"],[\"0.416666666666667\",\"rgba(42,123,142,1)\"],[\"0.458333333333333\",\"rgba(38,133,141,1)\"],[\"0.5\",\"rgba(37,144,140,1)\"],[\"0.541666666666667\",\"rgba(33,154,138,1)\"],[\"0.583333333333333\",\"rgba(39,164,133,1)\"],[\"0.625\",\"rgba(47,174,127,1)\"],[\"0.666666666666667\",\"rgba(53,183,121,1)\"],[\"0.708333333333333\",\"rgba(79,191,110,1)\"],[\"0.75\",\"rgba(98,199,98,1)\"],[\"0.791666666666667\",\"rgba(119,207,85,1)\"],[\"0.833333333333333\",\"rgba(147,214,70,1)\"],[\"0.875\",\"rgba(172,220,52,1)\"],[\"0.916666666666667\",\"rgba(199,225,42,1)\"],[\"0.958333333333333\",\"rgba(226,228,40,1)\"],[\"1\",\"rgba(253,231,37,1)\"]],\"showscale\":true,\"x\":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],\"y\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],\"z\":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.020947694132832373,0.057384573297643904,0.077230206950872682,0.078258676120725901,0.058386690942224817,0.015730531346323851,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.033762749915840051,0.08446510582329847,0.12090198498811,0.14074761864133878,0.141776087811192,0.12190410263269091,0.079247943036789947,0.0122037295877373,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.032721048885429149,0.095297112477565782,0.1459994683850242,0.18243634754983573,0.20228198120306451,0.20331045037291773,0.18343846519441664,0.14078230559851568,0.07373809214946303,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0.019351163855817033,0.091371292312893315,0.15394735590502995,0.20464971181248837,0.2410865909772999,0.26093222463052868,0.26196069380038189,0.24208870862188081,0.19943254902597984,0.1323883355769272,0.039753054281635225,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0.074790333687643873,0.14681046214472016,0.20938652573685679,0.26008888164431521,0.29652576080912674,0.31637139446235552,0.31739986363220873,0.29752787845370765,0.25487171885780668,0.18782750540875404,0.095192224113462065,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0.047900347494019724,0.12692153951611718,0.19894166797319346,0.26151773156533009,0.31222008747278851,0.34865696663760004,0.36850260029082882,0.36953106946068204,0.34965908428218095,0.30700292468627999,0.23995871123722734,0.14732342994193537,0.02849331834837221,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0.013153336797770865,0.096741646029262052,0.1757628380513595,0.24778296650843579,0.31035903010057242,0.36106138600803084,0.39749826517284237,0.41734389882607115,0.41837236799592437,0.39850038281742328,0.35584422322152232,0.28880000977246967,0.1961647284771777,0.077334616883614538,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0.05878620711756577,0.14237451634905696,0.22139570837115441,0.29341583682823069,0.35599190042036732,0.40669425632782574,0.44313113549263727,0.46297676914586605,0.46400523831571927,0.44413325313721819,0.40147709354131722,0.33443288009226457,0.2417975987969726,0.12296748720340944,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0.015576470095582273,0.10132851251883124,0.18491682175032242,0.26393801377241988,0.33595814222949616,0.39853420582163279,0.44923656172909121,0.48567344089390274,0.50551907454713152,0.50654754371698474,0.48667555853848365,0.44401939894258269,0.37697518549353004,0.28433990419823807,0.16550979260467491,0.020844084446482447,0,0,0],[0,0,0,0,0,0,0,0,0,0,0.055166792480272175,0.14091883490352114,0.22450714413501233,0.30352833615710978,0.37554846461418606,0.43812452820632269,0.48882688411378111,0.52526376327859259,0.54510939693182148,0.5461378661016747,0.5262658809231735,0.48360972132727259,0.41656550787821994,0.32393022658292797,0.20510011498936481,0.060434406831172349,0,0,0],[0,0,0,0,0,0,0,0,0,0.0063901141470076861,0.091954748201850456,0.17770679062509942,0.26129509985659061,0.34031629187868806,0.41233642033576434,0.47491248392790097,0.52561483983535939,0.56205171900017092,0.5818973526533997,0.58292582182325292,0.56305383664475184,0.52039767704885087,0.45335346359979822,0.36071818230450625,0.24188807071094309,0.09722236255275063,0,0,0],[0,0,0,0,0,0,0,0,0,0.040530107226282475,0.12609474128112524,0.21184678370437421,0.2954350929358654,0.37445628495796285,0.44647641341503913,0.50905247700717582,0.55975483291463424,0.59619171207944577,0.61603734573267444,0.61706581490252765,0.59719382972402668,0.55453767012812571,0.48749345667907301,0.39485817538378104,0.27602806379021788,0.13136235563202542,0,0,0],[0,0,0,0,0,0,0,0,0,0.072177191810116947,0.15774182586495972,0.24349386828820868,0.32708217751969987,0.40610336954179732,0.4781234979988736,0.54069956159101018,0.5914019174984686,0.62783879666328013,0.64768443031650902,0.64871289948636224,0.62884091430786104,0.58618475471196008,0.51914054126290754,0.42650525996761551,0.30767514837405235,0.16300944021585989,0,0,0],[0,0,0,0,0,0,0,0,0.018382984623872112,0.10148429471524639,0.18704892877008916,0.27280097119333813,0.35638928042482931,0.43541047244692677,0.50743060090400305,0.57000666449613968,0.6207090204035981,0.65714589956840963,0.67699153322163841,0.67802000239149163,0.65814801721299054,0.61549185761708958,0.54844764416803693,0.45581236287274496,0.3369822512791818,0.19231654312098934,0.023924351496224072,0,0],[0,0,0,0,0,0,0,0,0.045499038715348106,0.12860034880672239,0.21416498286156516,0.29991702528481412,0.38350533451630531,0.46252652653840276,0.53454665499547904,0.59712271858761568,0.64782507449507409,0.68426195365988562,0.7041075873131144,0.70513605648296762,0.68526407130446654,0.64260791170856557,0.57556369825951292,0.48292841696422095,0.36409830537065779,0.21943259721246533,0.051040405587700066,0,0],[0,0,0,0,0,0,0,0,0.070567744086310835,0.15366905417768512,0.23923368823252789,0.32498573065577685,0.40857403988726804,0.48759523190936549,0.55961536036644177,0.6221914239585784,0.67289377986603682,0.70933065903084835,0.72917629268407713,0.73020476185393035,0.71033277667542927,0.6676766170795283,0.60063240363047565,0.50799712233518368,0.38916701074162052,0.24450130258342806,0.076109110958662796,0,0],[0,0,0,0,0,0,0,0.015263809606941958,0.093726771391593799,0.17682808148296808,0.26239271553781085,0.34814475796105981,0.431733067192551,0.51075425921464845,0.58277438767172474,0.64535045126386137,0.69605280717131979,0.73248968633613132,0.7523353199893601,0.75336378915921332,0.73349180398071223,0.69083564438481126,0.62379143093575862,0.53115614964046665,0.41232603804690349,0.26766032988871102,0.09926813826394576,0,0],[0,0,0,0,0,0,0,0.036644319676398529,0.11510728146105037,0.19820859155242465,0.28377322560726742,0.36952526803051639,0.45311357726200757,0.53213476928410497,0.60415489774118125,0.66673096133331788,0.7174333172407763,0.75387019640558783,0.77371583005881672,0.77474429922866994,0.75487231405016875,0.71221615445426778,0.64517194100521524,0.55253665970992327,0.43370654811636006,0.28904083995816759,0.12064864833340233,0,0],[0,0,0,0,0,0,0,0.056370711696431181,0.13483367348108302,0.2179349835724573,0.30349961762730004,0.38925166005054901,0.4728399692820402,0.55186116130413765,0.62388128976121393,0.68645735335335056,0.73715970926080898,0.77359658842562051,0.79344222207884929,0.79447069124870251,0.77459870607020143,0.73194254647430046,0.66489833302524781,0.57226305172995584,0.45343294013639268,0.30876723197820022,0.14037504035343498,0,0],[0,0,0,0,0,0,0.0027797863651659871,0.074560537448874808,0.15302349923352665,0.23612480932490093,0.3216894433797437,0.40744148580299266,0.49102979503448385,0.5700509870565813,0.64207111551365759,0.70464717910579422,0.75534953501325264,0.79178641417806417,0.81163204783129295,0.81266051700114617,0.79278853182264508,0.75013237222674412,0.68308815877769147,0.5904528774823995,0.47162276588883634,0.32695705773064387,0.15856486610587861,0,0],[0,0,0,0,0,0,0.01954378514400601,0.091324536227714831,0.16978749801236667,0.25288880810374093,0.33845344215858375,0.42420548458183271,0.5077937938133239,0.58681498583542135,0.65883511429249764,0.72141117788463427,0.77211353379209269,0.80855041295690422,0.828396046610133,0.82942451577998622,0.80955253060148513,0.76689637100558417,0.69985215755653152,0.60721687626123955,0.48838676466767639,0.34372105650948392,0.17532886488471863,0,0],[0,0,0,0,0,0,0.034986005911865042,0.10676675699557386,0.18522971878022571,0.26833102887159999,0.35389566292644276,0.43964770534969172,0.52323601458118296,0.6022572066032803,0.67427733506035659,0.73685339865249322,0.78755575455995164,0.82399263372476317,0.84383826737799206,0.84486673654784528,0.82499475136934408,0.78233859177344311,0.71529437832439058,0.62265909702909861,0.50382898543553534,0.35916327727734293,0.19077108565257767,0.0047806794252760465,0],[0,0,0,0,0,0,0.049203991764441707,0.12098474284815053,0.19944770463280237,0.28254901472417665,0.36811364877901942,0.45386569120226838,0.53745400043375957,0.61647519245585702,0.68849532091293331,0.75107138450506994,0.80177374041252836,0.83821061957733989,0.85805625323056867,0.85908472240042189,0.8392127372219208,0.79655657762601983,0.72951236417696719,0.63687708288167522,0.51804697128811206,0.37338126312991959,0.20498907150515433,0.018998665277852711,0],[0,0,0,0,0,0,0.062289007944925534,0.13406975902863436,0.2125327208132862,0.29563403090466045,0.38119866495950328,0.46695070738275224,0.55053901661424343,0.62956020863634088,0.70158033709341716,0.76415640068555379,0.81485875659301221,0.85129563575782374,0.87114126941105252,0.87216973858090574,0.85229775340240466,0.80964159380650369,0.74259738035745104,0.64996209906215907,0.53113198746859591,0.38646627931040345,0.21807408768563816,0.032083681458336538,0],[0,0,0,0,0,0.011102565507374845,0.074326299204323099,0.14610705028803192,0.22457001207268376,0.30767132216405801,0.39323595621890084,0.4789879986421498,0.56257630787364099,0.64159749989573844,0.71361762835281473,0.77619369194495136,0.82689604785240978,0.86333292701722131,0.88317856067045009,0.8842070298403033,0.86433504466180222,0.82167888506590125,0.75463467161684861,0.66199939032155664,0.54316927872799348,0.39850357056980101,0.23011137894503572,0.044120972717734103,0],[0,0,0,0,0,0.022171632012530862,0.085395365709479115,0.15717611679318794,0.23563907857783978,0.31874038866921406,0.40430502272405683,0.49005706514730579,0.57364537437879703,0.65266656640089438,0.72468669485797066,0.78726275845010729,0.83796511435756571,0.87440199352237724,0.89424762717560613,0.89527609634545935,0.87540411116695815,0.83274795157105719,0.76570373812200465,0.67306845682671268,0.55423834523314941,0.409572637074957,0.24118044545019174,0.055190039222890119,0],[0,0,0,0,0,0.032346515581032839,0.095570249277981092,0.16735100036168993,0.24581396214634177,0.32891527223771605,0.41447990629255882,0.50023194871580778,0.58382025794729897,0.66284144996939642,0.73486157842647271,0.79743764201860934,0.84813999792606776,0.88457687709087929,0.90442251074410807,0.90545097991396128,0.8855789947354602,0.84292283513955923,0.77587862169050659,0.68324334039521462,0.56441322880165146,0.41974752064345899,0.25135532901869373,0.065364922791392097,0],[0,0,0,0,0,0.041696089992078661,0.10491982368902691,0.17670057477273574,0.25516353655738755,0.33826484664876189,0.4238294807036046,0.50958152312685356,0.59316983235834475,0.6721910243804422,0.74421115283751849,0.80678721642965512,0.85748957233711354,0.89392645150192507,0.91377208515515385,0.91480055432500706,0.89492856914650598,0.85227240955060501,0.78522819610155237,0.6925929148062604,0.57376280321269724,0.42909709505450477,0.26070490342973951,0.074714497202437918,0],[0,0,0,0,0,0.050284350640351805,0.11350808433730006,0.18528883542100888,0.26375179720566072,0.346853107297035,0.43241774135187777,0.51816978377512668,0.60175809300661798,0.68077928502871532,0.7527994134857916,0.81537547707792823,0.86607783298538665,0.90251471215019818,0.92236034580342707,0.92338881497328029,0.9035168297947791,0.86086067019887813,0.79381645674982559,0.70118117545453362,0.58235106386097035,0.43768535570277795,0.26929316407801268,0.083302757850711062,0],[0,0,0,0,0.0051589349460192252,0.058170699977401263,0.12139443367434952,0.19317518475805834,0.27163814654271018,0.35473945663408446,0.44030409068892723,0.52605613311217625,0.60964444234366733,0.68866563436576489,0.76068576282284117,0.8232618264149778,0.87396418232243622,0.91040106148724775,0.93024669514047642,0.93127516431032964,0.91140317913182867,0.8687470195359277,0.80170280608687494,0.70906752479158297,0.59023741319801992,0.4455717050398274,0.27717951341506214,0.091189107187760521,0],[0,0,0,0,0.01239846107163517,0.065410226103017208,0.12863395979996545,0.2004147108836743,0.27887767266832614,0.36197898275970042,0.44754361681454319,0.5332956592377921,0.61688396846928328,0.69590516049138074,0.76792528894845702,0.83050135254059365,0.88120370844805207,0.9176405876128636,0.93748622126609238,0.9385146904359456,0.91864270525744451,0.87598654566154355,0.8089423322124909,0.71630705091719893,0.59747693932363577,0.45281123116544336,0.2844190395406781,0.098428633313376465,0],[0,0,0,0,0.019042207556016613,0.072053972587398651,0.1352777062843469,0.20705845736805573,0.28552141915270757,0.36862272924408185,0.45418736329892462,0.53993940572217358,0.62352771495366477,0.70254890697576222,0.7745690354328385,0.83714509902497514,0.88784745493243356,0.92428433409724509,0.94412996775047386,0.94515843692032708,0.925286451741826,0.88263029214592503,0.81558607869687239,0.72295079740158041,0.60412068580801725,0.45945497764982479,0.29106278602505953,0.10507237979775791,0],[0,0,0,0,0.025137433136809217,0.078149198168191256,0.1413729318651395,0.21315368294884834,0.29161664473350019,0.37471795482487447,0.46028258887971724,0.54603463130296614,0.62962294053445733,0.70864413255655478,0.78066426101363107,0.8432403246057677,0.89394268051322612,0.93037955967803765,0.95022519333126643,0.95125366250111965,0.93138167732261856,0.8887255177267176,0.82168130427766495,0.72904602298237298,0.61021591138880982,0.46555020323061741,0.29715801160585215,0.11116760537855051,0],[0,0,0,0,0.030727860377120234,0.083739625408502272,0.14696335910545053,0.21874411018915935,0.29720707197381119,0.38030838206518547,0.46587301612002824,0.55162505854327715,0.63521336777476844,0.71423455979686579,0.78625468825394207,0.8488307518460787,0.89953310775353712,0.93596998691834865,0.95581562057157754,0.95684408974143076,0.93697210456292956,0.8943159449670286,0.82727173151797606,0.73463645022268409,0.61580633862912082,0.47114063047092841,0.30274843884616315,0.11675803261886153,0],[0,0,0,0,0.035853912717181649,0.088865677748563687,0.15208941144551194,0.22387016252922076,0.3023331243138726,0.38543443440524688,0.47099906846008965,0.55675111088333862,0.6403394201148298,0.71936061213692726,0.79138074059400354,0.85395680418614017,0.90465916009359859,0.94109603925841012,0.9609416729116389,0.96197014208149212,0.94209815690299104,0.89944199730709007,0.83239778385803742,0.73976250256274545,0.62093239096918229,0.47626668281098983,0.30787449118622456,0.12188408495892294,0],[0,0,0,0,0.040552939623338537,0.093564704654720582,0.15678843835166884,0.22856918943537766,0.30703215122002947,0.39013346131140375,0.47569809536624652,0.56145013778949548,0.64503844702098667,0.72405963904308412,0.79607976750016041,0.85865583109229704,0.90935818699975546,0.94579506616456699,0.96564069981779577,0.96666916898764899,0.9467971838091479,0.90414102421324694,0.83709681076419429,0.74446152946890232,0.62563141787533916,0.48096570971714669,0.31257351809238143,0.12658311186507984,0],[0,0,0,0.0034205896149966802,0.044859429748971731,0.097871194780353776,0.16109492847730203,0.23287567956101085,0.31133864134566269,0.39443995143703697,0.48000458549187974,0.56575662791512871,0.64934493714661989,0.72836612916871735,0.80038625762579363,0.86296232121793026,0.91366467712538868,0.95010155629020021,0.96994718994342899,0.97097565911328221,0.95110367393478112,0.90844751433888016,0.84140330088982751,0.74876801959453554,0.62993790800097238,0.48527219984277992,0.31688000821801465,0.13088960199071303,0],[0,0,0,0.0073663720509898542,0.048805212184964905,0.10181697721634694,0.1650407109132952,0.23682146199700402,0.31528442378165589,0.39838573387303011,0.48395036792787294,0.5697024103511219,0.65329071958261309,0.73231191160471054,0.80433204006178682,0.86690810365392346,0.91761045956138187,0.95404733872619341,0.97389297237942218,0.9749214415492754,0.95504945637077432,0.91239329677487335,0.8453490833258207,0.75271380203052873,0.63388369043696557,0.48921798227877311,0.32082579065400785,0.1348353844267062,0],[0,0,0,0.010980805868016412,0.052419646001991463,0.1054314110333735,0.16865514473032175,0.24043589581403058,0.31889885759868242,0.4020001676900567,0.48756480174489947,0.57331684416814843,0.65690515339963962,0.73592634542173707,0.80794647387881335,0.87052253747094999,0.9212248933784084,0.95766177254321994,0.97750740619644871,0.97853587536630193,0.95866389018780085,0.91600773059189988,0.84896351714284723,0.75632823584755526,0.6374981242539921,0.49283241609579964,0.32444022447103438,0.13844981824373276,0],[0,0,0,0.014290958246870752,0.055729798380845803,0.10874156341222785,0.1719652971091761,0.24374604819288492,0.32220900997753676,0.40531032006891105,0.49087495412375381,0.57662699654700278,0.66021530577849397,0.73923649780059142,0.8112566262576677,0.87383268984980433,0.92453504575726275,0.96097192492207428,0.98081755857530306,0.98184602774515628,0.9619740425666552,0.91931788297075423,0.85227366952170158,0.75963838822640961,0.64080827663284645,0.49614256847465399,0.32775037684988872,0.14175997062258711,0]],\"type\":\"surface\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n#### Magarey model\n\nIn the early 2000s, Magarey and collaborators [@magarey2005] proposed a generic infection model for foliar fungal pathogens, designed to predict infection periods based on limited data on temperature and wetness requirements. The model uses cardinal temperatures (minimum, optimum, maximum) and the minimum wetness duration (Wmin) necessary for infection. The model can incorporate inputs based on estimated cardinal temperatures and surface wetness duration. These values are available for numerous pathogens and can be consulted in the literature (See table 2 of the paper by @magarey2005).\n\nThe model utilizes a temperature response function, which is adjusted to the pathogen's minimum and optimum wetness duration needs, allowing it to be broadly applicable even with limited data on specific pathogens. The model was validated with data from 53 studies, showing good accuracy and adaptability, even for pathogens lacking comprehensive data [@magarey2005].\n\nThe function is given by\n\n$f(T) = \\left( \\frac{T_{\\text{max}} - T}{T_{\\text{max}} - T_{\\text{opt}}} \\right)^{\\frac{T_{\\text{opt}} - T_{\\text{min}}}{T_{\\text{max}} - T_{\\text{opt}}}} \\times \\left( \\frac{T - T_{\\text{min}}}{T_{\\text{opt}} - T_{\\text{min}}} \\right)^{\\frac{T_{\\text{opt}} - T_{\\text{min}}}{T_{\\text{opt}} - T_{\\text{min}}}}$\n\nwhere $T$ is the temperature, $T_{\\text{min}}$ is the minimum temperature, $T_{\\text{opt}}$ is the optimum temperature, and $T_{\\text{max}}$ is the maximum temperature for infection.\n\nThe wetness duration requirement is given by\n\n$W(T) = \\frac{W_{\\text{min}}}{f(T)} \\leq W_{\\text{max}}$\n\nwhere $W_{\\text{min}}$ is the minimum wetness duration requirement, and $W_{\\text{max}}$ is an optional upper limit on $W(T)$.\n\nLet's write the functions for estimating the required wetness duration at each temperature.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_response <- function(T, Tmin, Topt, Tmax) {\n  if (T < Tmin || T > Tmax) {\n    return(0)\n  } else {\n    ((Tmax - T) / (Tmax - Topt))^((Topt - Tmin) / (Tmax - Topt)) * \n    ((T - Tmin) / (Topt - Tmin))^((Topt - Tmin) / (Topt - Tmin))\n  }\n}\n\n# Define the function to calculate wetness duration requirement W(T)\nwetness_duration <- function(T, Wmin, Tmin, Topt, Tmax, Wmax = Inf) {\n  f_T <- temp_response(T, Tmin, Topt, Tmax)\n  if (f_T == 0) {\n    return(0)  # Infinite duration required if outside temperature range\n  }\n  W <- Wmin / f_T\n  return(min(W, Wmax))  # Apply Wmax as an upper limit if specified\n}\n```\n:::\n\n\n\n\n\nLet's set the parameters for the fungus *Venturia inaequalis*, the cause of apple scab.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parameters for Venturia inaequalis (apple scab)\nT <- seq(0, 35, by = 0.5) \nWmin <- 6                  \nTmin <- 1                  \nTopt <- 20                 \nTmax <- 35                 \nWmax <- 40.5                \n\n# Calculate wetness duration required at each temperature\nW_T <- sapply(T, wetness_duration, Wmin, Tmin, Topt, Tmax, Wmax)\n\ntemperature_data_applescab <- data.frame(\n  Temperature = T,\n  Wetness_Duration = W_T\n)\n```\n:::\n\n\n\n\n\nAnd now the parameters for the fungus *Phakopsora pachyrhizi*, the cause of soybean rust in soybean.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Parameters for Phakposora pachyrhizi\nT <- seq(0, 35, by = 0.5)  \nWmin <- 8                \nTmin <- 10                  \nTopt <- 23                 \nTmax <- 28                \nWmax <- 12                 \n\n# Calculate wetness duration required at each temperature\nW_T <- sapply(T, wetness_duration, Wmin, Tmin, Topt, Tmax, Wmax)\n\ntemperature_data_soyrust <- data.frame(\n  Temperature = T,\n  Wetness_Duration = W_T)\n```\n:::\n\n\n\n\n\nWe can produce the plots for each pathogen.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\napplescab <- ggplot(temperature_data_applescab, aes(x = Temperature, y = Wetness_Duration)) +\n  geom_line(color = \"black\", linewidth = 1, linetype =1) +\n  theme_r4pde(font_size = 14)+\n  labs(x = \"Temperature (°C)\", y = \"Wetness Duration (hours)\", \n       subtitle = \"Venturia inaequalis\")+\n  theme(plot.subtitle = element_text(face = \"italic\"))\n\nsoyrust <- ggplot(temperature_data_soyrust, aes(x = Temperature, y = Wetness_Duration)) +\n  geom_line(color = \"black\", linewidth = 1, linetype =1) +\n  theme_r4pde(font_size = 14)+\n  labs(x = \"Temperature (°C)\", y = \"Wetness Duration (hours)\", \n       subtitle = \"Phakopsora pachyrizhi\")+ \n  theme(plot.subtitle = element_text(face = \"italic\"))\n\nlibrary(patchwork)\napplescab | soyrust\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n\nThe model was further adapted to predict \"infection severity\" values (a daily severity value or a risk index that is an arbitrary value which defines the predicted disease favorability for each day and is usually accumulated over time [@krause1975], and it was called temperature-moisture response function (TMRF) [@magarey2007] that uses cardinal temperatures and minimum wetness duration as inputs.\n\nLet's produce a function to calculate the infection severity value (constrained between 0 and 1) given the input of daily temperature and moisture duration.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTMRF <- function(T, W, Tmin, Topt, Tmax, Wmin, Wmax) {\n  if (W < Wmin) {\n    return(0)\n  }\n  fT = (Tmax - T) / (Tmax - Topt) * ((T - Tmin) / (Topt - Tmin)) ^ ((Topt - Tmin) / (Tmax - Topt))\n  fT = max(fT, 0)\n  WT = Wmin / fT\n  WT = min(WT, Wmax)\n  \n  # Adjust infection severity by wetness hours\n  infection_severity = (W / WT) * fT\n  infection_severity = min(infection_severity, 1) # Constrain between 0 and 1\n  return(infection_severity)\n}\n```\n:::\n\n\n\n\n\nLet's download hourly weather data using the {nasapower} package for the location of Viçosa, MG, Brazil and the month of January of 2024.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nasapower)\nweather <- get_power(\n  community = \"ag\",\n  lonlat = c(-42.8800, -20.7561),\n  pars = c(\"RH2M\", \"T2M\"),\n  dates = c(\"2024-04-01\", \"2024-04-30\"),\n  temporal_api = \"hourly\"\n)\n\n# Process the weather data\nweather2 <- weather %>%\n  group_by(YEAR, MO, DY) %>%\n  mutate(LW = case_when(RH2M > 90 ~ 1, \n                        TRUE ~ 0)) %>%\n  summarise(mean_temp = mean(T2M, \n                             na.rm = TRUE),\n            wetness_hours = sum(LW))\n\nweather3 <- weather2 %>%\n  mutate(date = as.Date(sprintf('%04d-%02d-%02d', YEAR, MO, DY)))\n\n# Use processed data: mean temperature and hours of wetness recorded per day\ndata <- weather3\n```\n:::\n\n\n\n\n\nLet's set the parameters for the soybean rust pathogen.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTmin <- 10                  \nTopt <- 23                 \nTmax <- 28                \nWmin <- 8  \nWmax <- 12    \n      \n# Apply the TMRF function to the data\ndata$infection_severity <- mapply(TMRF, data$mean_temp, data$wetness_hours, MoreArgs = list(Tmin = Tmin, Topt = Topt, Tmax = Tmax, Wmin = Wmin, Wmax = Wmax))\n\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 7\n# Groups:   YEAR, MO [1]\n    YEAR    MO    DY mean_temp wetness_hours date       infection_severity\n   <dbl> <dbl> <dbl>     <dbl>         <dbl> <date>                  <dbl>\n 1  2024     4     1      23.6             8 2024-04-01              0.976\n 2  2024     4     2      24.6             7 2024-04-02              0    \n 3  2024     4     3      25.1             3 2024-04-03              0    \n 4  2024     4     4      24.4             8 2024-04-04              0.877\n 5  2024     4     5      24.2             9 2024-04-05              1    \n 6  2024     4     6      23.8             8 2024-04-06              0.962\n 7  2024     4     7      22.7            10 2024-04-07              1    \n 8  2024     4     8      23.4             7 2024-04-08              0    \n 9  2024     4     9      24.0             7 2024-04-09              0    \n10  2024     4    10      24.7             8 2024-04-10              0.818\n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\nWe can then visualize the risk for each day of the month.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>  \n  ggplot(aes(date, infection_severity))+\n  geom_line()+\n  theme_r4pde(font_size = 12)+\n  labs(x = \"Date\", y = \"Infection severity index\",\n       title = \"Soybean rust risk based on the TMRF model\",\n       subtitle = \"Viçosa, MG, Brazil\")\n```\n\n::: {.cell-output-display}\n![](prediction-disease-modeling_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/plotly-binding-4.10.4/plotly.js\"></script>\n<script src=\"site_libs/typedarray-0.1/typedarray.min.js\"></script>\n<script src=\"site_libs/jquery-3.5.1/jquery.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n<link href=\"site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}