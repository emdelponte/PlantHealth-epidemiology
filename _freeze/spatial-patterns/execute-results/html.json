{
  "hash": "494d551778b001793e0a41f2864c6812",
  "result": {
    "engine": "knitr",
    "markdown": "# Spatial patterns\n\n## Definitions\n\nA spatial disease pattern can be defined as the arrangement of diseased entities relative to each other and to the architecture of the host crop [@chapter2007]. Such arrangement is the realization of the underlying dispersal of the pathogen, from one or several sources within and/or outside the area of interest, under the influence of physical, biological and environmental factors.\n\nThe study of spatial patterns is conducted at a specific time or multiple times during the epidemic. When assessed multiple times, both spatial and temporal processes can be characterized. Because epidemics change over time, it is expected that spatial patterns are not constant but change over time as well. Usually, plant pathologists are interested in determining spatial patterns at one or various spatial scales, depending on the objective of the study. The scale of interest may be a leaf or root, plant, field, municipality, state, country or even intercontinental area. The diseased units observed may vary from lesions on a single leaf to diseased fields in a large production region.\n\nThe patterns can be classified into two main types that occur naturally: **random** or **aggregated**. The random pattern originates because the chances for the units (leaf, plant, crop) to be infected are equal and low, and are largely independent from each other. In aggregated spatial patterns, such chances are unequal and there is dependency among the units. For example, a healthy unit close to a diseased unit is at higher risk than more distant units.\n\nLet's simulate in R two vectors (x,y) for the positions of diseased units that follow a random or an aggregated pattern. For the random pattern, we use `runif`, a function which generates random deviates from the uniform distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)          # for reproducibility\nx <- runif(50, 0, 30)  # x vector\ny <- runif(50, 0, 30)  # y vector\ndat <- data.frame(x,y) # dataframe for plotting\n```\n:::\n\n\nNow, the plot to visualize the random pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \nlibrary(r4pde)\ntheme_set(theme_r4pde())\n\npr <- dat |> # R base pipe operator\n  ggplot(aes(x, y))+\n  theme_r4pde(font_size = 12)+\n  geom_point(size =3, \n             color = \"darkred\")+\n  ylim(0,30)+\n  xlim(0,30)+\n  coord_fixed()+\n  labs(x = \"Distance x\", y = \"Distance y\", \n       title = \"Random\")\npr\n```\n\n::: {.cell-output-display}\n![Random pattern of a plant disease epidemic](spatial-patterns_files/figure-html/fig-random-1.png){#fig-random width=672}\n:::\n:::\n\n\nNow, we can generate new x and y vectors using `rnbinom` function which allows generating values for the negative binomial distribution (which should give rise to aggregated patterns) with parameters `size` and `prob`. Let's simulate 50 values with mean 12 and size 20 as dispersal parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnbinom(n = 50, mu = 12, size = 20)\ny <- rnbinom(n = 50, mu = 5, size = 20)\ndat2 <- data.frame(x, y)\n```\n:::\n\n\nThis should give us an aggregated pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npag <- dat2 |>\n  ggplot(aes(x, y))+\n  theme_r4pde(font_size = 12)+\n  geom_point(size = 3, color = \"darkred\")+\n  ylim(0,30)+\n  xlim(0,30)+\n  coord_fixed()+\n  labs(x = \"Distance x\", y = \"Distance y\", \n       title = \"Aggregated\")\npag\n```\n\n::: {.cell-output-display}\n![Aggregated pattern of a plant disease epidemic](spatial-patterns_files/figure-html/fig-aggregated-1.png){#fig-aggregated width=672}\n:::\n:::\n\n\nA rare pattern found in nature is the regular pattern, but it may be generated artificially by the man when conducting experimentation. Follows a code to produce the regular pattern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rep(c(0,5,10,15,20, 25, 30, 35, 40, 45), 5) \ny <- rep(c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45), each = 10)\ndat3 <- data.frame(x, y)\n\npreg <- dat3 |>\n  ggplot(aes(x, y))+\n  theme_r4pde(font_size = 12)+\n  geom_point(size = 3, color = \"darkred\")+\n  ylim(0,30)+\n  xlim(0,30)+\n  coord_fixed()+\n  labs(x = \"Distance x\", y = \"Distance y\", \n       title = \"Regular\")\npreg\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 51 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Regular pattern of a plant disease epidemic](spatial-patterns_files/figure-html/fig-regular-1.png){#fig-regular width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\npreg + pr + pag\nggsave(\"imgs/spatial.png\", width = 10, height = 4)\n```\n\n::: {.cell-output-display}\n![Patterns of a plant disease epidemic](spatial-patterns_files/figure-html/fig-all-1.png){#fig-all width=672}\n:::\n:::\n\n\n## Spatiotemporal\n\nThe location of diseased plants can be assessed over time and so we can appraise both the progress and pattern of the epidemics. Let's visualize spatial data collected from actual epidemics monitored (plant is diseased or not diseased) during six times during the epidemics. The data is available in the *epiphy* R package. Let's use only one variety and one irrigation type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(epiphy)\ntswv_1928 <- tomato_tswv$field_1928\n\ntswv_1928 |>\n  filter(variety == \"Burwood-Prize\"&\n         irrigation == \"trenches\") |> \n  ggplot(aes(x, y, fill= factor(i)))+\n  geom_tile(color = \"black\")+\n  coord_fixed()+\n  scale_fill_manual(values = c(\"grey70\", \"darkred\"))+\n  labs(fill = \"Status\", title = \"\")+\n  theme_void()+\n  theme(legend.position = \"bottom\")+\n  facet_wrap(~ t, nrow =1)\n```\n\n::: {.cell-output-display}\n![Spatial patterns of tomato spotted wilt virus at six assessment times](spatial-patterns_files/figure-html/fig-spatiotemporal1-1.png){#fig-spatiotemporal1 width=672}\n:::\n:::\n\n\nIn this other example, the severity of gummy stem blight (*Didymella bryoniae)* of watermelon [@café-filho2010] was recorded in a 0-4 ordinal scale over time (days after planting) and space, in a naturally-infected rain-fed commercial field, to evaluate the effect of the distance of initial inoculum on the intensity of the disease. The dataset is included in the {r4pde} package that accompanies the book.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(r4pde)\ndf <- DidymellaWatermelon\n\ndf |> \n  ggplot(aes(NS_col, EW_row, fill = severity))+\n  coord_fixed()+\n  geom_tile (color = \"white\")+\n  theme_void()+\n  theme(legend.position = c(0.9,0.25))+\n scale_fill_gradient(low = \"grey70\", high = \"darkred\")+\n  facet_wrap(~ dap, ncol = 4)\n```\n\n::: {.cell-output-display}\n![Spatial patterns of the severity (0-4 ordinal scale) gummy stem blight of watermelon during seven times after the day of planting [@café-filho2010]](spatial-patterns_files/figure-html/fig-spatiotemporal2-1.png){#fig-spatiotemporal2 width=672}\n:::\n:::\n\n\nWe can see that the disease spread from the initial focus detected at 50 days after planting, taking the entire field 37 days later with various levels of severity.\n\n## Simulating spatial patterns\n\nTwo Shiny apps have been developed to allow simulating various spatial disease patterns. The first generates a disease- or pathogen-only data where the units are located in a scatter plot where the user can define the number of cells of the grid as well as the number of points to be plotted and the realized pattern: random or aggregated.\n\n[![Screenshot of a Shiny app to simulate disease-only data in a grid](imgs/spatial_shiny.png){#fig-spatial1 fig-align=\"center\" width=\"521\"}](https://delponte.shinyapps.io/spatial/)\n\nThe second app generates an artificial plantation with presence-absence data in a 2D map. The user can define the number of rows and number of plants per row and the realized pattern: random or aggregated. The latter pattern can start from the center or border of the plantation. The app calculates the number of foci and the final incidence (proportion of diseased plants).\n\n[![Screenshot of a Shiny app to simulate a presence-absence data in a 2D map](imgs/spatial2_shiny.png){#fig-spatial2 fig-align=\"center\" width=\"521\"}](https://delponte.shinyapps.io/spatial2)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}